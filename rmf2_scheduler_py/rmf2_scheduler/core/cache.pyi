from __future__ import annotations
import rmf2_scheduler.core.data
import typing
__all__ = ['Action', 'ActionPayload', 'EventAction', 'ProcessAction', 'ScheduleCache', 'TaskAction']
class Action:
    """
    
        Cache change action for the schedule
        
    """
    @staticmethod
    @typing.overload
    def create(arg0: str, arg1: ActionPayload) -> Action:
        ...
    @staticmethod
    @typing.overload
    def create(arg0: rmf2_scheduler.core.data.ScheduleAction) -> Action:
        ...
    def apply(self) -> None:
        ...
    def data(self) -> rmf2_scheduler.core.data.ScheduleAction:
        ...
    def is_applied(self) -> bool:
        ...
    def is_valid(self) -> bool:
        ...
    def record(self) -> rmf2_scheduler.core.data.ScheduleChangeRecord:
        ...
    def validate(self, arg0: ScheduleCache) -> tuple:
        ...
class ActionPayload:
    """
    
        Payload for the cache change action
        
    """
    def __init__(self) -> None:
        ...
    def data(self, arg0: str) -> rmf2_scheduler.core.data.ScheduleAction:
        ...
    def destination_id(self, arg0: str) -> ActionPayload:
        ...
    def edge_type(self, arg0: str) -> ActionPayload:
        ...
    def event(self, arg0: rmf2_scheduler.core.data.Event) -> ActionPayload:
        ...
    def id(self, arg0: str) -> ActionPayload:
        ...
    def node_id(self, arg0: str) -> ActionPayload:
        ...
    def process(self, arg0: rmf2_scheduler.core.data.Process) -> ActionPayload:
        ...
    def source_id(self, arg0: str) -> ActionPayload:
        ...
    def task(self, arg0: rmf2_scheduler.core.data.Task) -> ActionPayload:
        ...
class EventAction(Action):
    """
    
        Change action for Event
        
    """
    def __init__(self, type: str, payload: ActionPayload) -> None:
        ...
    def apply(self) -> None:
        ...
    def validate(self, arg0: ScheduleCache) -> tuple:
        ...
class ProcessAction(Action):
    """
    
        Change action for Process
        
    """
    def __init__(self, type: str, payload: ActionPayload) -> None:
        ...
    def apply(self) -> None:
        ...
    def validate(self, arg0: ScheduleCache) -> tuple:
        ...
class ScheduleCache:
    """
    
        Cache for the schedule
        
    """
    def __init__(self) -> None:
        ...
    def clone(self) -> ScheduleCache:
        ...
    def get_all_events(self) -> list[rmf2_scheduler.core.data.Event]:
        ...
    def get_all_processes(self) -> list[rmf2_scheduler.core.data.Process]:
        ...
    def get_all_tasks(self) -> list[rmf2_scheduler.core.data.Task]:
        ...
    def get_event(self, arg0: str) -> rmf2_scheduler.core.data.Event:
        ...
    def get_process(self, arg0: str) -> rmf2_scheduler.core.data.Process:
        ...
    def get_task(self, arg0: str) -> rmf2_scheduler.core.data.Task:
        ...
    def has_event(self, arg0: str) -> bool:
        ...
    def has_process(self, arg0: str) -> bool:
        ...
    def has_task(self, arg0: str) -> bool:
        ...
    def lookup_events(self, arg0: rmf2_scheduler.core.data.Time, arg1: rmf2_scheduler.core.data.Time, arg2: bool, arg3: bool) -> list[rmf2_scheduler.core.data.Event]:
        ...
    def lookup_tasks(self, arg0: rmf2_scheduler.core.data.Time, arg1: rmf2_scheduler.core.data.Time, arg2: bool, arg3: bool) -> list[rmf2_scheduler.core.data.Task]:
        ...
class TaskAction(Action):
    """
    
        Change action for Task
        
    """
    def __init__(self, type: str, payload: ActionPayload) -> None:
        ...
    def apply(self) -> None:
        ...
    def validate(self, arg0: ScheduleCache) -> tuple:
        ...
